<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2012-2022 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          https://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis-Doma</title>
    <author email="mybatis-dev@googlegroups.com">The MyBatis Team</author>
  </properties>

  <body>
    <section name="Introduction">
      <p>
      mybatis-doma is an extension that allows you to use the Apache Doma scripting language
      to generate your dynamic SQL queries on the fly.
      </p>
      <p>
        If you are not familiar with apache doma, you can learn it from its documentation site:
      </p>
      <ul>
        <li>
          <a href="https://doma.apache.org/engine/2.1/vtl-reference.html">Doma Template Language (VTL) Reference</a>
        </li>
      </ul>
    </section>

    <section name="Requirments">
      <ul>
        <li>Java : Java 8+</li>
        <li>MyBatis : 3.5+</li>
        <li>Doma : 2.1+</li>
      </ul>
    </section>

    <section name="Install">
      <p>
        If you are using maven, you can add this:
      </p>
      <source><![CDATA[
<dependency>
    <groupId>org.mybatis.scripting</groupId>
    <artifactId>mybatis-doma</artifactId>
    <version>2.1.0</version>
</dependency>
]]></source>

      <p>If you are using gradle, you can use this snippet:</p>

      <source><![CDATA[
dependencies {
    compile("org.mybatis.scripting:mybatis-doma:2.1.0")
}]]></source>

    </section>

    <section name="Configuration">
      <subsection name="Common">
        <p>
          By default, the <code>mybatis-doma.properties</code> file create in your classpath.
        </p>
        <ul>
          <li>
            You can specify user defined custom directives to use on the Doma template engine using the Doma standard property(<code>runtime.custom_directives</code>).
            For details see the <a href="#User_Defined_Directives">"User Defined Directives"</a>.
            <source><![CDATA[
domaSettings.runtime.custom_directives = com.example.directives.MyDirective
# or
runtime.custom_directives = com.example.directives.MyDirective
]]></source>

            The <code>userdirective</code> property supported for keeping backward compatibility with old versions(2.0 or under).
            <source><![CDATA[
userdirective = com.example.directives.MyDirective
]]></source>
          </li>
          <li>
            You can specify user defined additional context attribute values that passed to template engine.
            For details see the <a href="#Additional_Context_Attributes">"Additional Context Attributes"</a>.
            <source><![CDATA[
# additionalContextAttributes.{name} = {value}
# 'additional-context-attributes' (kebab-case) can be used too
additionalContextAttributes.likeEscape = com.example.helpers.LikeEscape
additionalContextAttributes.masterCacheFacade = com.example.helpers.MasterCacheFacade
]]></source>

            The <code>additional.context.attributes</code> property supported for keeping backward compatibility with old versions(2.0 or under).
            <source><![CDATA[
# Value format: {name}:{value}(,...)
additional.context.attributes = likeEscape:com.example.helpers.LikeEscape,masterCacheFacade:com.example.helpers.MasterCacheFacade
]]></source>
          </li>
          <li>
            You can configure the Doma configuration as follow:
            About available setting name, please refer to <a href="https://doma.apache.org/engine/2.1/configuration.html">the reference documentation of Doma</a>.
            <source><![CDATA[
# domaSettings.{name} = {value}
# 'doma-settings' (kebab-case) can be used too
domaSettings.resource.default_encoding = Windows-31J
]]></source>

            The <code>{name} = {value}</code> format(without prefixed 'domaSettings') supported for keeping backward compatibility with old versions(2.0 or under).
            <source><![CDATA[
# This setting is same with 'domaSettings.resource.default_encoding'
resource.default_encoding = Windows-31J
]]></source>
          </li>
          <li>
            Since 2.1.0, you can use an any properties file or encoding as follow:
            <source><![CDATA[
$ java -Dmybatis-doma.config.file=mybatis-doma_production.properties -Dmybatis-doma.config.encoding=Windows-31J ...
]]></source>
          </li>
        </ul>

      </subsection>
      <subsection name="Scripting Language Driver">
        <p>
          You may need to do next steps:</p>
        <ul>
          <li>Register the language driver alias in your mybatis configuration file:
            <source><![CDATA[
<configuration>
  ...
  <typeAliases>
    <typeAlias alias="doma" type="org.mybatis.scripting.doma.DomaLanguageDriver"/>
  </typeAliases>
  ...
</configuration>]]></source>
          </li>
          <li>Set the doma as your default scripting language:
            <source><![CDATA[
<configuration>
  ...
  <settings>
      <setting name="defaultScriptingLanguage" value="doma"/>
  </settings>
  ...
</configuration>]]></source>
          </li>
        </ul>
      </subsection>
    </section>

    <section name="Usage">
      <p>Just write your dynamic queries and use doma:</p>
      <p>Example:
      <source><![CDATA[
<select id="findPerson" lang="doma">
  #set( $pattern = $_parameter.name + '%' )
  SELECT *
  FROM person
  WHERE name LIKE @{pattern, jdbcType=VARCHAR}
</select>
      ]]></source>
      </p>
      <p>
        Note:
      </p>
      <ul>
        <li><code>#{...}</code> syntax is replaced by <code>@{...}</code> syntax to avoid collisions with VTL</li>
      </ul>
    </section>
    <section name="Custom directives">
      <subsection name="trim">
        <h5>#trim( prefix prefixOverrides suffix suffixOverrides ) body #end</h5>
        <table>
          <thead>
            <tr>
              <th>Arg</th>
              <th>Description</th>
              <th>Type</th>
              <th>Default</th>
              <th>Example</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>prefix</td>
              <td>Text to prepend if the body is not empty</td>
              <td>String</td>
              <td>Empty String</td>
              <td>"WHERE "</td>
            </tr>
            <tr>
              <td>prefixOverrides</td>
              <td>Text to be removed from the body if it is at the beginning</td>
              <td>String list delimited by |</td>
              <td>Empty String</td>
              <td>"AND |OR "</td>
            </tr>
            <tr>
              <td>suffix</td>
              <td>Text to appended if the body is not empty</td>
              <td>String</td>
              <td>Empty String</td>
              <td>"] "</td>
            </tr>
            <tr>
              <td>suffixOverrides</td>
              <td>Text to be removed from the body if it is at the end</td>
              <td>String list delimited by |</td>
              <td>Empty String</td>
              <td>","</td>
            </tr>
          </tbody>
        </table>
      </subsection>
      <subsection name="where">
        <h5>#where() body #end</h5>
        <p>Removes any AND or OR from the beginning, then if the result is not empty, prepends WHERE at the beginning</p>
      </subsection>
      <subsection name="mset">
        <h5>#mset() body #end</h5>
        <p>Removes any "," from the end, then if the result is not empty, prepends SET at the beginning</p>
      </subsection>
      <subsection name="repeat">
        <h5>#repeat( collection  var  separator  open  close ) body #end</h5>
        <p>
          Same as #foreach, but with special features:
        </p>
        <ul>
          <li>Support for iterative parameter bindings via @{...} syntax</li>
          <li>Automatic separator and open/close string management</li>
        </ul>
        <table>
          <thead>
            <tr>
              <th>Arg</th>
              <th>Description</th>
              <th>Type</th>
              <th>Default</th>
              <th>Example</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>collection</td>
              <td>List or array to iterate</td>
              <td>List or Array</td>
              <td>Empty List</td>
              <td>$_parameter.selectedIds</td>
            </tr>
            <tr>
              <td>var</td>
              <td>Variable to be used in the loop</td>
              <td>Reference</td>
              <td></td>
              <td>$item</td>
            </tr>
            <tr>
              <td>separator</td>
              <td>String to be inserted between iterations</td>
              <td>String</td>
              <td>Empty String</td>
              <td>","</td>
            </tr>
            <tr>
              <td>open</td>
              <td>String to be prepended at the beginning</td>
              <td>String</td>
              <td>Empty String</td>
              <td>"("</td>
            </tr>
            <tr>
              <td>close</td>
              <td>String to be appended at the end</td>
              <td>String</td>
              <td>Empty String</td>
              <td>")"</td>
            </tr>
          </tbody>
        </table>
        <p>Example:</p>
        <source><![CDATA[
SELECT *
FROM City
#where()
  #repeat( $_parameter.ids $id "," " state_id IN (" ")" )
    @{id}
  #end
#end
        ]]></source>
      </subsection>
      <subsection name="in">
        <h5>#in( collection  var  field ) body #end</h5>
        <p>
          Generates a SQL IN clause and breaks it into groups of 1000 items seperated by an OR clause to get around database limitations on the maximum number of items that can be handled.
          It also supports iterative parameter bindings via @{...} syntax.
        </p>
        <table>
          <thead>
            <tr>
              <th>Arg</th>
              <th>Description</th>
              <th>Type</th>
              <th>Default</th>
              <th>Example</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>collection</td>
              <td>List or array to iterate</td>
              <td>List or Array</td>
              <td>Empty List</td>
              <td>$_parameter.selectedIds</td>
            </tr>
            <tr>
              <td>var</td>
              <td>Variable to be used in the loop</td>
              <td>Reference</td>
              <td></td>
              <td>$item</td>
            </tr>
            <tr>
              <td>field</td>
              <td>Field name to be inserted before the IN clause</td>
              <td>String</td>
              <td>Empty String</td>
              <td>"state_id"</td>
            </tr>
          </tbody>
        </table>
        <p>Example:</p>
        <source><![CDATA[
SELECT *
FROM City
#where()
  #in( $_parameter.ids $id "state_id" )
    @{id}
  #end
#end
        ]]></source>
      </subsection>
    </section>
    <section name="User Defined Directives">
      <p>
      mybatis-doma allows you to write your own doma directive:
      </p>
        <ul>
          <li>
            Create a property file named <code>mybatis-doma.properties</code> and put in on the classpath.
          </li>
          <li>
             Create your own doma directive.
          </li>
          <li>
             Add the directive to the property file.
          </li>
         <li>
             Use the directive in the sql template.
            <br/>
          </li>
        </ul>
        <p>Example:</p>

        <source><![CDATA[
// User defined directive
package com.example.directives;

public class MyDirective extends Directive {
  // ...
}
]]></source>

      <source><![CDATA[
# mybatis-doma.properties
userdirective=com.example.directives.MyDirective,com.example.directives.SpecialDirective
]]></source>

      <source><![CDATA[
<!-- sql template -->
SELECT *
FROM City
  #myDirective()
    ......
  #end
]]></source>

    </section>

    <section name="Additional Context Attributes">
      <p>
        The mybatis-doma allows you to pass any attribute(instantiate using specified FQCN) to the Doma template engine.
      </p>
      <ul>
        <li>
          Create a property file named <code>mybatis-doma.properties</code> and put in on the classpath.
        </li>
        <li>
          Create any <b>thread safe</b> class.
        </li>
        <li>
          Add the class to the property file.
        </li>
        <li>
          Use object that instantiated by mybatis-doma in your sql template.
        </li>
      </ul>
      <p>Example:</p>

      <source><![CDATA[
// User defined directive
package com.example.helpers;

public class LikeEscape {
  public String escape(String val) {
    // ...
    return escapedVal;
  }
}
]]></source>

      <source><![CDATA[
# mybatis-doma.properties
additionalContextAttributes.likeEscape = com.example.helpers.LikeEscape
]]></source>

      <source><![CDATA[
<!-- sql template -->
#set( $pattern = $likeEscape.escape($_parameter.name) + "%" )
SELECT * FROM User
  WHERE name LIKE @{pattern, javaType=string}
]]></source>
    </section>

    <section name="MyBatis specific syntax">
      <subsection name="Parameter Bindings">
        <p><code>@{ property, attr1=val1, attr2=val2, ... }</code></p>
        <p>Where attrs must be any of: javaType, jdbcType, mode, numericScale, resultMap, typeHandler, jdbcTypeName</p>
      </subsection>
    </section>
  </body>

</document>
